// Code generated by MockGen. DO NOT EDIT.
// Source: book_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "virtual-library/models"

	gomock "github.com/golang/mock/gomock"
)

// MockBookRepositoryInterface is a mock of BookRepositoryInterface interface.
type MockBookRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryInterfaceMockRecorder
}

// MockBookRepositoryInterfaceMockRecorder is the mock recorder for MockBookRepositoryInterface.
type MockBookRepositoryInterfaceMockRecorder struct {
	mock *MockBookRepositoryInterface
}

// NewMockBookRepositoryInterface creates a new mock instance.
func NewMockBookRepositoryInterface(ctrl *gomock.Controller) *MockBookRepositoryInterface {
	mock := &MockBookRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepositoryInterface) EXPECT() *MockBookRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookRepositoryInterface) Create(book *models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookRepositoryInterfaceMockRecorder) Create(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookRepositoryInterface)(nil).Create), book)
}

// Delete mocks base method.
func (m *MockBookRepositoryInterface) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookRepositoryInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookRepositoryInterface)(nil).Delete), id)
}

// FindAll mocks base method.
func (m *MockBookRepositoryInterface) FindAll() ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockBookRepositoryInterfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockBookRepositoryInterface)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockBookRepositoryInterface) FindByID(id uint) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockBookRepositoryInterfaceMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockBookRepositoryInterface)(nil).FindByID), id)
}

// Update mocks base method.
func (m *MockBookRepositoryInterface) Update(book *models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", book)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBookRepositoryInterfaceMockRecorder) Update(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBookRepositoryInterface)(nil).Update), book)
}
